//Basic Template
#include <bits/stdc++.h>

using namespace std;

int main()
{

}

//Decimal to Binary
int decToBinary(int n)
{
    string s = bitset<64> (n).to_string();
    const auto loc1 = s.find('1');
    string str = s.substr(loc1);
    return count(str.begin(), str.end(), '1');
}

//Binary to Decimal
void binaryToDecimal(int m)
{
    vector<int> vect;
    while (m / 10 != 0)
    {
        vect.insert(vect.begin(), m % 10);
        m /= 10;
    }
    vect.insert(vect.begin(), m % 10);
    int temp = 0;
    for (int i = 0; i < vect.size(); i++)
    {
        if (i == 0)
        {
            temp = vect[i];
        }
        else
        {
            temp = temp * 2 + vect[i];
        }
    }
    cout << temp;
}

//Printing the vector
void print(vector<int> vect)
{
    for (int i = 0; i < vect.size(); i++)
    {
        cout << vect[i] << " ";
    }
}

//Count for maximum occurance of a number
int majority(int a[], int size)
{
    int i = 0, count = 1, max_count = 1, num = 0;
    sort(a, a + size);
    while (i != size)
    {
        if (size == 1)
        {
            return a[i];
        }
        if (a[i] == a[i+1])
        {
            count++;
        }
        else
        {
            if (count > max_count)
            {
                max_count = count;
                num = a[i];
            }
            count = 1;
        }
        i++;
    }
    if (max_count > (size/2))
    {
        return num;
    }
    else
    {
        return -1;
    }
}
